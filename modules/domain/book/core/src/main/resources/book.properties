# Flyway
com.example.demo.book.flyway.locations=classpath:sql/postgresql
com.example.demo.book.flyway.schemas=core


# JPA settings
spring.jpa.database-platform=org.hibernate.dialect.PostgreSQL9Dialect
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect

spring.datasource.database-name=vact

spring.datasource.driver-class-name = org.postgresql.Driver
com.example.demo.book.datasource.username=${spring.datasource.username:sa}
com.example.demo.book.datasource.password=${spring.datasource.password:sa}
com.example.demo.book.datasource.max-active=${spring.datasource.max-active:50}
com.example.demo.book.datasource.jdbc-url=jdbc:postgresql://${database-server}/${spring.datasource.database-name}
com.example.demo.book.datasource.hikari.connection-test-query=SELECT 1

# kafka settings
spring.kafka.bootstrap-servers=3.126.223.219:9092
spring.cloud.stream.kafka.binder.brokers=3.126.223.219

spring.cloud.stream.defaultBinder=kafka
spring.cloud.stream.default.contentType=application/json
spring.cloud.stream.bindings.input.destination=test
spring.cloud.stream.kafka.binder.autoCreateTopics=false
#spring.cloud.stream.bindings.input.group=booksGroup

spring.cloud.stream.bindings.input.consumer.maxAttempts=3
spring.cloud.stream.bindings.input.consumer.backOffInitialInterval=500
spring.cloud.stream.bindings.input.consumer.backOffMaxInterval=1000
spring.cloud.stream.bindings.input.consumer.backOffMultiplier=2.0

#spring.cloud.stream.kafka.bindings.input.consumer.enableDlq=true